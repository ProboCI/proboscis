#! /usr/bin/env node
var parse = require('shell-quote').parse;
var es = require('event-stream');
var async = require('async');
var fs = require('fs');
var util = require('util');
var path = require('path');
var Loader = require('yaml-config-loader');

var yargs = require('yargs');
var Penelope = require('../index');
var server = require('../lib/server');
var runner = new Penelope();
var loader = new Loader();

var argv = yargs
  .usage('penelope -c "echo foo" -c "echo bar"')
  .default('help', false)
  .describe('help', 'Display this help text.')
  .alias('help', 'h')
  .describe('version', 'Print the version number')
  .alias('version', 'v')
  .default('version', false)
  .alias('command', 'c')
  .describe('command', 'A command to run as a child.')
  .describe('name', 'If present, a name for the command in the same position. The first --name will name the first --command.')
  .alias('name', 'n')
  .default('name', false)
  .describe('port', 'Is specified, a port to listen on for control commands.')
  .alias('port', 'p')
  .default('port', false)
  .describe('keep-alive', 'Keep the server alive even if all processes have closed, useful if you are going to be restarting services.')
  .alias('keep-alive', 'k')
  .default('keep-alive', false)
  .argv;

if (argv.help) {
  yargs.showHelp();
  process.exit(0);
}

if (argv.version) {
  console.log(require('../package').version);
  process.exit(0);
}

var commands = argv.command;
if (typeof argv.command === 'string') {
  commands = [argv.command];
}

var name = argv.name;
if (typeof argv.name === 'string') {
  name = [argv.name];
}

runner.eventStream
  .pipe(es.stringify())
  .pipe(process.stdout);

var i = null;
for (i in argv._) {
  loader.add(argv._[i]);
}

if (argv.keepAlive) {
  runner.closeStreamWithLastProcess = false;
}

loader.load(function(error, config) {
  var i = null;
  for (i in commands) {
    var command = commands[i];
    var args = parse(command);
    var binary = args.shift();
    var commandName = binary;
    if (name !== false && name[i] !== undefined) {
      commandName = name[i];
    }
    runner.runCommand(commandName, binary, args);
  }
});

if (argv.port) {
  argv.log = console.log;
  server(runner, argv);
}
