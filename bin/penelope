#! /usr/bin/env node
var parse = require('shell-quote').parse;
var es = require('event-stream');
var async = require('async');
var fs = require('fs');
var util = require('util');

var yargs = require('yargs');
var Penelope = require('../index');
var runner = new Penelope();

argv = yargs
  .usage('penelope -c "echo foo" -c "echo bar"')
  .default('help', false)
  .describe('help', 'Display this help text.')
  .alias('help', 'h')
  .alias('command', 'c')
  .describe('command', 'A command to run as a child.')
  .argv;

if (argv.help) {
  yargs.showHelp();
  process.exit(0);
}

var commands = argv.command;

if (typeof argv.command === 'string') {
  commands = [ argv.command ];
}

runner.eventStream
  .pipe(es.stringify())
  .pipe(process.stdout);

var i = null;
for (i in commands) {
  var command = commands[i];
  var args = parse(command);
  var binary = args.shift();
  var name = binary;
  runner.runCommand(name, binary, args);
}

var files = argv._;
if (files.length > 0) {
  var fileLoadHandler = function(error, files) {
    if (error && error.code === 'ENOENT') {
      var message = 'File cannot be loaded, this may be bad permissions or a bad file path `%s`.';
      var message = util.format(message, error.path);
      console.error(message);
      process.exit(1);
    }
    async.each(files, JSON.parse, function(error, items) {
      console.log(arguments);
      process.exit(1);
    });
  }
  async.each(files, fs.readFile, fileLoadHandler);
}




