#! /usr/bin/env node
var util = require('util');
var es = require('event-stream');
var yargs = require('yargs');
var formatter = require('json-stream-formatter');

var filter = require('../test/helpers/filter');

argv = yargs
  .usage('proboscis -c "echo foo" -c "echo bar" | proboscis-format')
  .describe('help', 'Display this help text.')
  .default('help', false)
  .alias('help', 'h')
  .describe('color', 'Format in color.')
  .alias('color', 'c')
  .default('color', true)
  .describe('name', 'The name of a command to filter on.')
  .alias('name', 'n')
  .default('name', false)
  .describe('stream', 'The name of the stream to filter on. Generally stdout or stderr')
  .alias('stream', 's')
  .check(function(argv) {
    if (argv.hasOwnProperty('stream') && argv.stream) {
      if (['stdout', 'stderr'].indexOf(argv.stream) === -1) {
        throw('Invalid stream selected. Options are stdout and stderr.');
      }
    }
  })
  .default('stream', false)
  .argv;

if (argv.help) {
  console.log("Format log event streams generated by proboscis in a human readable format.\n\r")
  yargs.showHelp();
  process.exit(0);
}

var format = null;
if (argv.color !== 'false' && argv.color !== false) {
  format = '[{{ time | date("d/m/Y-h:m:s") | cyan }} {{ name | grey }} {{ stream }}] {{ message }}';
}
else {
  format = '[{{ time | date("d/m/Y-h:m:s") }} {{ name }} {{ stream }}] {{ message }}';
}
var formatter = formatter.format(format)

var parsed = process.stdin
  .pipe(es.split())
  .pipe(es.parse())

if (argv.name) {
  parsed = parsed.pipe(filter({name: argv.name}));
}

if (argv.stream) {
  parsed = parsed.pipe(filter({stream: argv.stream}));
}

parsed
  .pipe(formatter)
  .pipe(process.stdout);
